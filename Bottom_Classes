public class Bottom_Classes {
    public static class Car extends Land_Transportation{
        private int trunkSpace;

        public Car(String rentalOrPurchase, double purchasePrice, double rentalPrice, double averageSpeed,
            int numPassengers, String fuelType, int trunkSpace) {
            super(rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.trunkSpace = trunkSpace;
        }
        
        public void setTrunkSpace(int trunkSpace) { this.trunkSpace = trunkSpace; }
        public int getTrunkSpace() { return this.trunkSpace; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s%7d%3s", "Trunk Space:", getTrunkSpace(), "m^3");
        }
    }

    public static class Bus extends Land_Transportation{
        private String startBusStop;

        public Bus(String rentalOrPurchase, double purchasePrice, double rentalPrice, double averageSpeed,
            int numPassengers, String fuelType, String startBusStop) {
            super(rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.startBusStop = startBusStop;

        }

        public void setStartBusStop(String busStop) { this.startBusStop = startBusStop; }

        public String getStartBusStop() { return this.startBusStop; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Starting Stop", getStartBusStop());
        }
    }
    public static class Train extends Land_Transportation{
        private String departureStation;

        public Train(String rentalOrPurchase, double purchasePrice, double rentalPrice, double averageSpeed,
              int numPassengers, String fuelType, String departureStation) {
            super(rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.departureStation = departureStation;

        }

        public void setDepartureStation(String departureStation) { this.departureStation = departureStation; }
        public String getDepartureStation() { return this.departureStation; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Departure Stop:", getDepartureStation());
        }
    }

    public static class Bike extends Land_Transportation{
        private String pickupLocation;

        public Bike(String rentalOrPurchase, double purchasePrice, double rentalPrice, double averageSpeed,
             int numPassengers, String fuelType, String pickupLocation) {
            super(rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.pickupLocation = pickupLocation;

        }

        public void setPickupLocation(String pickupLocation) { this.pickupLocation = pickupLocation; }
        public String getPickupLocation() { return this.pickupLocation; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Bike Pickup Location", getPickupLocation());
        }
    }

    public static class Plane extends Air_Transportation {
        private String terminal;
        private int carryOnLimit;
        private double maxLuggageWeight;

        public Plane(String terminal,int carryOnLimit,double maxLuggageWeight,String rentalOrPurchase,double purchasePrice, double rentalPrice,
              double averageSpeed, int numPassengers, String airline, String airport, String departureTime, String arrivalTime){
            super(airport, airline, departureTime, arrivalTime,rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed, numPassengers);
            this.terminal = terminal;
            this.carryOnLimit = carryOnLimit;
            this.maxLuggageWeight = maxLuggageWeight;
        }

        public String getTerminal() {return this.terminal;}
        public int getCarryOnLimit() {return this.carryOnLimit;}
        public double getMaxLuggageWeight() {return this.maxLuggageWeight;}

        public void setTerminal(String terminal) {this.terminal = terminal;}
        public void setAirline(int carryOnLimit) {this.carryOnLimit = carryOnLimit;}
        public void setAirport(double maxLuggageWeight) {this.maxLuggageWeight = maxLuggageWeight;}

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Departure Terminal", getTerminal());
        }
    }

    public static class Heli extends Air_Transportation {
        private int weight_limit;

        public Heli(int weight_limit, String rentalOrPurchase, double purchasePrice,
             double rentalPrice, double averageSpeed, int numPassengers, String airline, String airport,
             String departureTime, String arrivalTime){
            super(airport, airline, departureTime, arrivalTime,rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed,
                    numPassengers);
            this.weight_limit = weight_limit;
        }
        public void setWeight_limit(int weight_limit) { this.weight_limit = weight_limit; }
        public int getWeight_limit() { return this.weight_limit; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Weight-Limit", getWeight_limit());
        }
    }

    public class Hot_Air_Balloon extends Air_Transportation{
    int ride_duration; // b/c hot air balloon rides can be shorter than the other transportations
    String tethered; // this will either be a "yes" or "no" answer if the ride
                    // is tethered or not

    public Hot_Air_Balloon(int ride_duration,String tethered,String rentalOrPurchase,double purchasePrice, double rentalPrice,
                           double averageSpeed, int numPassengers, String airline, String airport, String departureTime,
                           String arrivalTime){
        super(airport, airline, departureTime, arrivalTime,rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed,
                numPassengers);
        this.ride_duration = ride_duration;
        this.tethered = tethered;
    }

    public int getRide_duration(){return this.ride_duration;}
    public String getTethered(){return this.tethered;}

    public void setRide_duration(int ride_duration) {this.ride_duration=ride_duration;}
    public void setTethered(String tethered) {this.tethered=tethered;}

    @Override
    public String toString(){
        return super.toString() + String.format("%-25s%-10d%-25s%-10s","Ride duration: ",getRide_duration(),"Tethered: ",
                getTethered());
    }
}

    public class Dirigible extends Air_Transportation{
    private String envelope;

    public Dirigible(String envelope,int carryOnLimit,double maxLuggageWeight,String rentalOrPurchase,double purchasePrice,
                     double rentalPrice, double averageSpeed, int numPassengers, String airline, String airport,
                     String departureTime, String arrivalTime){
        super(airport, airline, departureTime, arrivalTime,rentalOrPurchase, purchasePrice, rentalPrice, averageSpeed,
                numPassengers);
        this.envelope=envelope;
    }
    public String getEnvelope(){return this.envelope;}
    public void setEnvelope(String envelope){this.envelope=envelope;}

    @Override
    public String toString(){
        return super.toString() + String.format("%-25s%-20s","Envelope type: ", getEnvelope());
    }
}

    public static class Boat extends Water_Transportation {
        private int weight_limit;

        public Boat(int weight_limit,String dock, String loadingTime, String marina,String rentalOrPurchase,double purchasePrice,
             double rentalPrice, double averageSpeed, int numPassengers){
            super(dock,loadingTime,marina,rentalOrPurchase,purchasePrice,rentalPrice,averageSpeed,numPassengers);
            this.weight_limit = weight_limit;
        }

        public void setWeight_limit(int weight_limit) { this.weight_limit = weight_limit; }
        public int getWeight_limit() { return this.weight_limit; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10d", "Max carry-weight", getWeight_limit());
        }
    }

    public static class Submarine extends Water_Transportation {
        private int depth;

        public Submarine(int depth,String dock, String loadingTime, String marina,String rentalOrPurchase,double purchasePrice,
                  double rentalPrice, double averageSpeed, int numPassengers){
            super(dock,loadingTime,marina,rentalOrPurchase,purchasePrice,rentalPrice,averageSpeed,numPassengers);
            this.depth=depth;
        }

        public void setDepth(int depth) { this.depth = depth; }
        public int getDepth() { return this.depth; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10d", "Travel-Depth:", getDepth());
        }
    }

    public static class Ship extends Water_Transportation {
        private String hull_size;

        public Ship(String hull_size, String dock, String loadingTime, String marina,String rentalOrPurchase,double purchasePrice,
             double rentalPrice, double averageSpeed, int numPassengers){
            super(dock,loadingTime,marina,rentalOrPurchase,purchasePrice,rentalPrice,averageSpeed,numPassengers);
            this.hull_size = hull_size;
        }

        public void setHull_size(String hull_size) { this.hull_size = hull_size; }
        public String getHull_size() { return this.hull_size; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Hull Size:", getHull_size());
        }
    }
}
