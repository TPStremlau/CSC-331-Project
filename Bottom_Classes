public class Bottom_Classes {
    public static class Car extends Land_Transportation{
        private int trunkSpace;

        public Car(double purchasePrice, double rentalPrice, double averageSpeed,
                   int numPassengers, String fuelType, int trunkSpace) {
            super(purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.trunkSpace = trunkSpace;
        }

        public void setTrunkSpace(int trunkSpace) { this.trunkSpace = trunkSpace; }
        public int getTrunkSpace() { return this.trunkSpace; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s%7d%3s", "Trunk Space:", getTrunkSpace(), "m^3");
        }

        public String getName() {
            return "Car";
        }
    }

    public static class Bus extends Land_Transportation{
        private String startBusStop;

        public Bus(double purchasePrice, double rentalPrice, double averageSpeed,
                   int numPassengers, String fuelType, String startBusStop) {
            super(purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.startBusStop = startBusStop;

        }

        public void setStartBusStop(String busStop) { this.startBusStop = startBusStop; }

        public String getStartBusStop() { return this.startBusStop; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Starting Stop", getStartBusStop());
        }

        @Override
        public String getName() {
            return "Bus";
        }
    }
    public static class Train extends Land_Transportation{
        private String departureStation;

        public Train(double purchasePrice, double rentalPrice, double averageSpeed,
                     int numPassengers, String fuelType, String departureStation) {
            super(purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.departureStation = departureStation;

        }

        public void setDepartureStation(String departureStation) { this.departureStation = departureStation; }
        public String getDepartureStation() { return this.departureStation; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Departure Stop:", getDepartureStation());
        }

        @Override
        public String getName() {
            return "Train";
        }
    }

    public static class Bike extends Land_Transportation{
        private String pickupLocation;

        public Bike(double purchasePrice, double rentalPrice, double averageSpeed,
                    int numPassengers, String fuelType, String pickupLocation) {
            super(purchasePrice, rentalPrice, averageSpeed, numPassengers, fuelType);
            this.pickupLocation = pickupLocation;

        }

        public void setPickupLocation(String pickupLocation) { this.pickupLocation = pickupLocation; }
        public String getPickupLocation() { return this.pickupLocation; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Bike Pickup Location", getPickupLocation());
        }

        @Override
        public String getName() {
            return "Bike";
        }
    }

    public static class Plane extends Air_Transportation {
        private String terminal;
        private int carryOnLimit;
        private double maxLuggageWeight;

        public Plane(String terminal,int carryOnLimit,double maxLuggageWeight,double purchasePrice, double rentalPrice,
                     double averageSpeed, int numPassengers, String airline, String airport, String departureTime, String arrivalTime){
            super(airport, airline, departureTime, arrivalTime, purchasePrice, rentalPrice, averageSpeed, numPassengers);
            this.terminal = terminal;
            this.carryOnLimit = carryOnLimit;
            this.maxLuggageWeight = maxLuggageWeight;
        }

        public String getTerminal() {return this.terminal;}
        public int getCarryOnLimit() {return this.carryOnLimit;}
        public double getMaxLuggageWeight() {return this.maxLuggageWeight;}

        public void setTerminal(String terminal) {this.terminal = terminal;}
        public void setAirline(int carryOnLimit) {this.carryOnLimit = carryOnLimit;}
        public void setAirport(double maxLuggageWeight) {this.maxLuggageWeight = maxLuggageWeight;}

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Departure Terminal", getTerminal());
        }

        @Override
        public String getName() {
            return "Plane";
        }
    }

    public static class Heli extends Air_Transportation {
        private int weight_limit;

        public Heli(int weight_limit, double purchasePrice,
                    double rentalPrice, double averageSpeed, int numPassengers, String airline, String airport,
                    String departureTime, String arrivalTime){
            super(airport, airline, departureTime, arrivalTime, purchasePrice, rentalPrice, averageSpeed,
                    numPassengers);
            this.weight_limit = weight_limit;
        }
        public void setWeight_limit(int weight_limit) { this.weight_limit = weight_limit; }
        public int getWeight_limit() { return this.weight_limit; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Weight-Limit", getWeight_limit());
        }

        @Override
        public String getName() {
            return "Helicopter";
        }
    }

    public static class Dirigible extends Air_Transportation {
        private int volume;

        public Dirigible(int volume, double purchasePrice,
                         double rentalPrice, double averageSpeed, int numPassengers, String airline, String airport,
                         String departureTime, String arrivalTime) {
            super(airport, airline, departureTime, arrivalTime, purchasePrice, rentalPrice, averageSpeed,
                    numPassengers);
            this.volume = volume;
        }

        public void setVolume(int volume) {
            this.volume = volume;
        }

        public int getVolume() {
            return this.volume;
        }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Balloon Volume/Size:", getVolume());
        }

        @Override
        public String getName() {
            return "Dirigible";
        }

    }

        public static class Hot_Air_Balloon extends Air_Transportation {
            private int max_altitude;

            public Hot_Air_Balloon(int max_altitude, double purchasePrice,
                                   double rentalPrice, double averageSpeed, int numPassengers, String airline, String airport,
                                   String departureTime, String arrivalTime) {
                super(airport, airline, departureTime, arrivalTime, purchasePrice, rentalPrice, averageSpeed,
                        numPassengers);
                this.max_altitude = max_altitude;
            }

            public void setMax_altitude(int max_altitude) {
                this.max_altitude = max_altitude;
            }

            public int getMax_altitude() {
                return this.max_altitude;
            }

            @Override
            public String toString() {
                return super.toString() + String.format("%25s %10s", "Max-Altitude", getMax_altitude());
            }

            @Override
            public String getName() {
                return "Hot Air Balloon";
            }

        }

    public static class Boat extends Water_Transportation {
        private int weight_limit;

        public Boat(int weight_limit,String dock, String loadingTime, String marina, double purchasePrice,
                    double rentalPrice, double averageSpeed, int numPassengers){
            super(dock,loadingTime,marina,purchasePrice,rentalPrice,averageSpeed,numPassengers);
            this.weight_limit = weight_limit;
        }

        public void setWeight_limit(int weight_limit) { this.weight_limit = weight_limit; }
        public int getWeight_limit() { return this.weight_limit; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10d", "Max carry-weight", getWeight_limit());
        }
        
        @Override
        public String getName() {
            return "Boat";
        }
    }

    public static class Submarine extends Water_Transportation {
        private int depth;

        public Submarine(int depth,String dock, String loadingTime, String marina, double purchasePrice,
                         double rentalPrice, double averageSpeed, int numPassengers){
            super(dock,loadingTime,marina, purchasePrice, rentalPrice,averageSpeed,numPassengers);
            this.depth=depth;
        }

        public void setDepth(int depth) { this.depth = depth; }
        public int getDepth() { return this.depth; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10d", "Travel-Depth:", getDepth());
        }

        @Override
        public String getName() {
            return "Submarine";
        }
    }

    public static class Ship extends Water_Transportation {
        private String hull_size;

        public Ship(String hull_size, String dock, String loadingTime, String marina, double purchasePrice,
                    double rentalPrice, double averageSpeed, int numPassengers){
            super(dock,loadingTime,marina,purchasePrice, rentalPrice, averageSpeed,numPassengers);
            this.hull_size = hull_size;
        }

        public void setHull_size(String hull_size) { this.hull_size = hull_size; }
        public String getHull_size() { return this.hull_size; }

        @Override
        public String toString() {
            return super.toString() + String.format("%25s %10s", "Hull Size:", getHull_size());
        }

        @Override
        public String getName() {
            return super.getName() + "Ship";
        }
    }
}
